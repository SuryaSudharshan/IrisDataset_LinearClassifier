# -*- coding: utf-8 -*-
"""classify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pmIBZthDPP_AIO9dIT5CJzk4LCPUfwZm
"""

import pandas as pd
import numpy as np

url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
data = pd.read_csv(url, names=names)

data.columns = ['sepal length', 'sepal width', 'petal length', 'petal width', 'class']

data['bias'] = 1

data['class'][data['class'] == 'Iris-setosa'] = 1
data['class'][data['class'] == 'Iris-versicolor'] = 2
data['class'][data['class'] == 'Iris-virginica'] = 3

data[50:75]

df1 = data[0:25]
df1 = df1.append(data[50:75])
df1 = df1.append(data[100:125])

df2 = data[25:50]
df2 = df2.append(data[75:100])
df2 = df2.append(data[125:150])

df1_mat = df1.as_matrix(columns=['sepal length','sepal width','petal length','petal width','bias'])

df1_mat.shape

sum1 = 0
for val in df1_mat:
    val1 = np.reshape(val, (1, len(val)))
    sum1 += (val1.T * val1)

sum1.shape

df1_class = (df1['class'] - 1).apply(lambda x : np.eye(3)[x])

df1_class = np.array(df1_class)

sum2 = 0
for i in range(len(df1_mat)):
    val1 = np.reshape(df1_mat[i], (len(df1_mat[i]), 1))
    sum2 += (val1 * df1_class[i].reshape(1,3))

sum2

lda = 0.0001

sum1 = sum1 + lda

w = np.matmul(np.linalg.inv(sum1), sum2)

w

w[:,0]

df2_mat = df2.as_matrix(columns=['sepal length','sepal width','petal length','petal width','bias'])

fin_cla_w = [[],[],[]]
for i in range(len(fin_cla_w)):
    for val in df2_mat:
        val1 = np.reshape(val, (1, len(val)))
        weights = np.matmul(val1, w[:, i])[0]
        fin_cla_w[i].append(weights)

np.array(fin_cla_w).shape

final_classes = []
for val in np.array(fin_cla_w).T:
    final_classes.append(np.argmax(val))

final_classes

arr = np.zeros(75)
arr[25:50] = 1
arr[50:75] = 2

from sklearn.metrics import confusion_matrix
confusion_matrix(np.array(final_classes), arr)

from sklearn.metrics import accuracy_score
1-accuracy_score(np.array(final_classes), arr)





